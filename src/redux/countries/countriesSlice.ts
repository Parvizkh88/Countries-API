import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import axios from 'axios'
import { CountriesState, CountryT } from '../../types/CountryTypes'

const baseURL = 'https://restcountries.com/v3.1/all'

const initialState :CountriesState ={
   countries:[],
       isLoading:false,
       isError: false,
       message:''
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
const fetchCountries = createAsyncThunk( 'countries/fetchCountries', async () => {
    let response = await axios.get(baseURL) 
    let data:CountryT[]= await response.data
    return data
  }
)

 const countriesSlice = createSlice({
  name: 'countries',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // search: (state, action:PayloadAction<string>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      // state.value += 1
    },
 
    // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload
    // },
  // },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
       builder.addCase(fetchCountries.fulfilled, (state, action)=>{
      state.countries= action.payload
      state.isLoading = false
      state.isError = false
      state.message = 'Countries fetched successfully'
    })
      builder.addCase(fetchCountries.rejected, (state, action) => {
      state.countries = []
      state.isError = true
      state.isLoading = false
      state.message = 'Error fetching countries'
    })
     builder.addCase(fetchCountries.pending, (state, action) => {
      state.isLoading = true
      state.message = 'Loading...'
    })
  },
})

// export const { search } = countriesSlice.action
export  { fetchCountries } 

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default countriesSlice.reducer
